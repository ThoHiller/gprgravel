function [gui,myui] = GPRGRAVEL_createPanelDomain(data,gui,myui)
%GPRGRAVEL_createPanelDomain creates "Domain" settings panel
%
% Syntax:
%       [gui,myui] = GPRGRAVEL_createPanelDomain(gui,myui,data)
%
% Inputs:
%       data - figure data structure
%       gui - figure gui elements structure
%       myui - individual GUI settings structure
%
% Outputs:
%       gui
%       myui
%
% Example:
%       [gui,myui] = GPRGRAVEL_createPanelDomain(data,gui,myui)
%
% Other m-files required:
%       findjobj.m
%
% Subfunctions:
%       none
%
% MAT-files required:
%       none
%
% See also GPRGRAVEL
% Author(s): see AUTHORS.md
% License: GNU GPLv3 (at end)

%------------- BEGIN CODE --------------

%% create all boxes
gui.panels.Domain.VBox = uix.VBox('Parent', gui.panels.Domain.main,...
    'Spacing',3,'Padding',3);

textDomain = uix.HBox('Parent',gui.panels.Domain.VBox,'Spacing',3);
setDomain = uix.HBox('Parent',gui.panels.Domain.VBox,'Spacing',3);
textDx = uix.HBox('Parent',gui.panels.Domain.VBox,'Spacing',3);
setDx = uix.HBox('Parent',gui.panels.Domain.VBox,'Spacing',3);
textDip = uix.HBox('Parent',gui.panels.Domain.VBox,'Spacing',3);
setDip = uix.HBox('Parent',gui.panels.Domain.VBox,'Spacing',3);
textVolSpecies = uix.HBox('Parent',gui.panels.Domain.VBox,'Spacing',3);
setVolSpecies = uix.HBox('Parent',gui.panels.Domain.VBox,'Spacing',3);

%% Domain
gui.text_handles.domainx = uicontrol('Style','Text',...
    'Parent',textDomain,...
    'String','x [m]',...
    'FontSize',myui.fontsize);
gui.text_handles.domainy = uicontrol('Style','Text',...
    'Parent',textDomain,...
    'String','y [m]',...
    'FontSize',myui.fontsize);
gui.text_handles.domainz = uicontrol('Style','Text',...
    'Parent',textDomain,...
    'String','z [m]',...
    'FontSize',myui.fontsize);

tstr = 'Set domain size.';
gui.edit_handles.xm = uicontrol('Style','Edit',...
    'Parent',setDomain,...
    'String',sprintf('%4.3f',data.domain.xm),...
    'Tag','domain_xm',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.domain.xm),...    
    'Callback',@onEditValue);
gui.edit_handles.ym = uicontrol('Style','Edit',...
    'Parent',setDomain,...
    'String',sprintf('%4.3f',data.domain.ym),...
    'Tag','domain_ym',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.domain.ym),...    
    'Callback',@onEditValue);
gui.edit_handles.zm = uicontrol('Style','Edit',...
    'Parent',setDomain,...
    'String',sprintf('%4.3f',data.domain.zm),...
    'Tag','domain_zm',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.domain.zm),...    
    'Callback',@onEditValue);
set(setDomain,'Widths',[-1 -1 -1]);

%% dx & porosity
gui.text_handles.dx = uicontrol('Style','Text',...
    'Parent',textDx,...
    'String','grid dx [m]',...
    'FontSize',myui.fontsize);
gui.text_handles.porosity = uicontrol('Style','Text',...
    'Parent',textDx,...
    'String','porosity [0-1]',...
    'FontSize',myui.fontsize);

tstr = 'Set domain discretization.';
gui.edit_handles.dx = uicontrol('Style','Edit',...
    'Parent',setDx,...
    'String',sprintf('%4.3f',data.domain.dx),...
    'Tag','domain_dx',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.domain.dx),...    
    'Callback',@onEditValue);
tstr = 'Set domain porosity.';
gui.edit_handles.porosity = uicontrol('Style','Edit',...
    'Parent',setDx,...
    'String',sprintf('%4.3f',data.domain.porosity),...
    'Tag','domain_porosity',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.domain.porosity),...    
    'Callback',@onEditValue);
set(setDx,'Widths',[-1 -1]);

%% surface dip
gui.text_handles.maskdipx = uicontrol('Style','Text',...
    'Parent',textDip,...
    'String','surface dip x [deg]',...
    'FontSize',myui.fontsize);
gui.text_handles.maskdipy = uicontrol('Style','Text',...
    'Parent',textDip,...
    'String','surface dip y [deg]',...
    'FontSize',myui.fontsize);

tstr = 'Set dip angle in x-direction';
gui.edit_handles.maskdipx = uicontrol('Style','Edit',...
    'Parent',setDip,...
    'String',sprintf('%d',data.params.maskdipx(1)),...
    'Tag','params_maskdipx',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.maskdipx 0 89]),...
    'Callback',@onEditValue);
tstr = 'Set dip angle in y-direction';
gui.edit_handles.maskdipy = uicontrol('Style','Edit',...
    'Parent',setDip,...
    'String',sprintf('%d',data.params.maskdipy(1)),...
    'Tag','params_maskdipy',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.maskdipy 0 89]),...
    'Callback',@onEditValue);
set(setDip,'Widths',[-1 -1]);

%% volumetric ratios of species
gui.text_handles.volair = uicontrol('Style','Text',...
    'Parent',textVolSpecies,...
    'String','air [0-1]',...
    'FontSize',myui.fontsize);
gui.text_handles.volh2o = uicontrol('Style','Text',...
    'Parent',textVolSpecies,...
    'String','water [0-1]',...
    'FontSize',myui.fontsize);
gui.text_handles.volmtx = uicontrol('Style','Text',...
    'Parent',textVolSpecies,...
    'String','matrix [0-1]',...
    'FontSize',myui.fontsize);

tstr = 'Set volumetric ratios of species.';
gui.edit_handles.volair = uicontrol('Style','Edit',...
    'Parent',setVolSpecies,...
    'String',sprintf('%4.3f',data.domain.VolSpeciesAIR),...
    'Tag','domain_VolSpeciesAIR',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.domain.VolSpeciesAIR),...    
    'Callback',@onEditValue);
gui.edit_handles.volh2o = uicontrol('Style','Edit',...
    'Parent',setVolSpecies,...
    'String',sprintf('%4.3f',data.domain.VolSpeciesH2O),...
    'Tag','domain_VolSpeciesH2O',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.domain.VolSpeciesH2O),...    
    'Callback',@onEditValue);
gui.edit_handles.volmtx = uicontrol('Style','Edit',...
    'Parent',setVolSpecies,...
    'String',sprintf('%4.3f',data.domain.VolSpeciesMTX),...
    'Tag','domain_VolSpeciesMTX',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.domain.VolSpeciesMTX),...    
    'Callback',@onEditValue);
set(setVolSpecies,'Widths',[-1 -1 -1]);

%% Java Hack to adjust the text fields vertical alignment
jh = findjobj(gui.text_handles.domainx);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.domainy);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.domainz);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.dx);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.porosity);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.maskdipx);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.maskdipy);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.volair);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.volh2o);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.volmtx);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)

return

%------------- END OF CODE --------------

%% License:
% GNU GPLv3
%
% GPRGRAVEL
% Copyright (C) 2023 Thomas Hiller
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <https://www.gnu.org/licenses/>.