function [gui,myui] = GPRGRAVEL_createPanelParameter(data,gui,myui)
%GPRGRAVEL_createPanelParameter creates "Domain" settings panel
%
% Syntax:
%       [gui,myui] = GPRGRAVEL_createPanelParameter(gui,myui,data)
%
% Inputs:
%       data - figure data structure
%       gui - figure gui elements structure
%       myui - individual GUI settings structure
%
% Outputs:
%       gui
%       myui
%
% Example:
%       [gui,myui] = GPRGRAVEL_createPanelParameter(data,gui,myui)
%
% Other m-files required:
%       findjobj.m
%
% Subfunctions:
%       none
%
% MAT-files required:
%       none
%
% See also GPRGRAVEL
% Author(s): see AUTHORS.md
% License: GNU GPLv3 (at end)

%------------- BEGIN CODE --------------

%% create all boxes
gui.panels.Params.VBox = uix.VBox('Parent', gui.panels.Params.main,...
    'Spacing',0,'Padding',0);

% targetpbox = uix.HBox('Parent',gui.panels.Params.VBox,'Spacing',0);
% maskpbox = uix.HBox('Parent',gui.panels.Params.VBox,'Spacing',0);
% targetpanel = uipanel('Parent',targetpbox,'Title','Target');
% maskpanel = uipanel('Parent',maskpbox,'Title','Masks');
targetpanel = uipanel('Parent',gui.panels.Params.VBox,'Title','Target');
surfacepanel = uipanel('Parent',gui.panels.Params.VBox,'Title','Surface');
satprofilepanel = uipanel('Parent',gui.panels.Params.VBox,'Title','Saturation Profile');
miscpanel = uipanel('Parent',gui.panels.Params.VBox,'Title','Misc');
exportpanel = uipanel('Parent',gui.panels.Params.VBox,'Title','Export');
set(gui.panels.Params.VBox,'heights',[5*22+6*3+15 22+2*3+17 3*22+5*3+12 22+2*3+17 3*22+5*3+12]);

%% Parameter - Target
targetvbox = uix.VBox('Parent', targetpanel,'Spacing',3,'Padding',3);
loadtarget = uix.HBox('Parent',targetvbox,'Spacing',3);
texttarget1 = uix.HBox('Parent',targetvbox,'Spacing',3);
edittarget1 = uix.HBox('Parent',targetvbox,'Spacing',3);
texttarget2 = uix.HBox('Parent',targetvbox,'Spacing',3);
edittarget2 = uix.HBox('Parent',targetvbox,'Spacing',3);

% load target
gui.text_handles.usetarget = uicontrol('Style','Text',...
    'Parent',loadtarget,...
    'String','Target',...
    'FontSize',myui.fontsize);
tstr = 'grain size distribution file';
gui.edit_handles.targetfile = uicontrol('Style','Edit',...
    'Parent',loadtarget,...
    'String','none',...
    'Tag','params_targetfile',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on');
tstr = 'Load Target File.';
gui.push_handles.LoadTarget = uicontrol('Style','pushbutton',...
    'Parent',loadtarget,...
    'String','Load',...
    'Tag','Load',...
    'ToolTipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onPushLoadTarget);
set(loadtarget,'Widths',[75 -1 50]);

% target center point
gui.text_handles.targetx = uicontrol('Style','Text',...
    'Parent',texttarget1,...
    'String','cent-x [m]',...
    'FontSize',myui.fontsize);
gui.text_handles.targety = uicontrol('Style','Text',...
    'Parent',texttarget1,...
    'String','cent-y [m]',...
    'FontSize',myui.fontsize);
gui.text_handles.targetz = uicontrol('Style','Text',...
    'Parent',texttarget1,...
    'String','cent-z [m]',...
    'FontSize',myui.fontsize);

tstr = 'Set target center point';
gui.edit_handles.targetx = uicontrol('Style','Edit',...
    'Parent',edittarget1,...
    'String',sprintf('%4.3f',data.params.targetCenter(1)),...
    'Tag','params_targetCenterx',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.targetCenter(1) 0 10]),...    
    'Callback',@onEditValue);
gui.edit_handles.targety = uicontrol('Style','Edit',...
    'Parent',edittarget1,...
    'String',sprintf('%4.3f',data.params.targetCenter(2)),...
    'Tag','params_targetCentery',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.targetCenter(2) 0 10]),...    
    'Callback',@onEditValue);
gui.edit_handles.targetz = uicontrol('Style','Edit',...
    'Parent',edittarget1,...
    'String',sprintf('%4.3f',data.params.targetCenter(3)),...
    'Tag','params_targetCenterz',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.targetCenter(3) 0 10]),...    
    'Callback',@onEditValue);
set(edittarget1,'Widths',[-1 -1 -1]);

% target orientation
gui.text_handles.targetpol = uicontrol('Style','Text',...
    'Parent',texttarget2,...
    'String','polar angle [deg]',...
    'FontSize',myui.fontsize);
gui.text_handles.targetaz = uicontrol('Style','Text',...
    'Parent',texttarget2,...
    'String','azimuthal angle [deg]',...
    'FontSize',myui.fontsize);

tstr = 'Set polar angle';
gui.edit_handles.targetTheta = uicontrol('Style','Edit',...
    'Parent',edittarget2,...
    'String',sprintf('%4.3f',data.params.targetTheta),...
    'Tag','params_targetTheta',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.targetTheta 0 180]),...    
    'Callback',@onEditValue);
tstr = 'Set azimuthal angle';
gui.edit_handles.targetPhi = uicontrol('Style','Edit',...
    'Parent',edittarget2,...
    'String',sprintf('%4.3f',data.params.targetPhi),...
    'Tag','params_targetPhi',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.targetPhi -180 180]),...    
    'Callback',@onEditValue);
set(edittarget2,'Widths',[-1 -1]);

%% Parameter - Surface
surfacevbox = uix.VBox('Parent',surfacepanel,'Spacing',3,'Padding',3);
% textSurface = uix.HBox('Parent',surfacevbox,'Spacing',3);
setSurface = uix.HBox('Parent',surfacevbox,'Spacing',3);

tstr = ['<HTML>If activated, the surface is closed and no grain smaller<br>',...
    'than the threshold radius can stick out.'];
gui.radio_handles.closedSurface = uicontrol('Style','checkbox',...
    'Parent',setSurface,...
    'String','close surface',...
    'Tag','close_surface',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onRadioSurface);

tstr = ['<HTML>Give threshold radius from which grains cannot stick out of an open surface.<br><br>',...
    'HINT: if the largest grain radius is given, the surface is closed for all grains.'];
gui.edit_handles.closeSurfaceR = uicontrol('Style','Edit',...
    'Parent',setSurface,...
    'String',sprintf('%d',data.params.closeSurfaceR),...
    'Tag','params_closeSurfaceR',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.closeSurfaceR 0 1]),...
    'Callback',@onEditValue);

gui.text_handles.closedSurface = uicontrol('Style','Text',...
    'Parent',setSurface,...
    'String','thresh. radius [m]',...
    'FontSize',myui.fontsize);

set(setSurface,'Widths',[-1 -1 -1]);

%% Parameter - Saturation Profile
satprofilevbox = uix.VBox('Parent',satprofilepanel,'Spacing',3,'Padding',3);
setSatProfile = uix.HBox('Parent',satprofilevbox,'Spacing',3);
textSatProfile = uix.HBox('Parent',satprofilevbox,'Spacing',3);
editSatProfile = uix.HBox('Parent',satprofilevbox,'Spacing',3);

tstr = 'If activated, one can select a saturation profile along z-direction.';
gui.radio_handles.Satprofile = uicontrol('Style','checkbox',...
    'Parent',setSatProfile,...
    'String','saturation profile',...
    'Tag','useSatProfile',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onRadioSatProfile);

tstr = 'If activated, choose between linear and exponential saturation profile.';
gui.popup_handles.SatProfileType = uicontrol('Style','popupmenu',...
    'Parent',setSatProfile,...
    'String',{'linear','exponential'},...
    'Tag','sat_profile_type',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onPopupSatProfile);

gui.text_handles.SatProfileTop = uicontrol('Style','Text',...
    'Parent',textSatProfile,...
    'String','saturation @ top [-]',...
    'FontSize',myui.fontsize);
gui.text_handles.SatProfileBottom = uicontrol('Style','Text',...
    'Parent',textSatProfile,...
    'String','saturation @ bottom [-]',...
    'FontSize',myui.fontsize);

tstr = 'Saturation at top';
gui.edit_handles.SatProfileTop = uicontrol('Style','Edit',...
    'Parent',editSatProfile,...
    'String',sprintf('%d',data.params.satBounds(1)),...
    'Tag','params_satProfileTop',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.satBounds(1) 0 1]),...
    'Callback',@onEditValue);
tstr = 'Saturation at bottom';
gui.edit_handles.SatProfileBottom = uicontrol('Style','Edit',...
    'Parent',editSatProfile,...
    'String',sprintf('%d',data.params.satBounds(2)),...
    'Tag','params_satProfileBottom',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.satBounds(2) 0 1]),...
    'Callback',@onEditValue);

%% Parameter - Misc
miscvbox = uix.VBox('Parent',miscpanel,'Spacing',3,'Padding',3);

% RNG
miscRNG = uix.HBox('Parent',miscvbox,'Spacing',3);

tstr = '<HTML>If activated, one can enter an arbitrary RNG seed value so that always the same packing is created.';
gui.radio_handles.customRNG = uicontrol('Style','checkbox',...
    'Parent',miscRNG,...
    'String','fix RNG seed',...
    'Tag','fixRNGseeed',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onRadioFixRNG);

tstr = '<HTML>Enter a custom RNG seed value.';
gui.edit_handles.customRNG = uicontrol('Style','Edit',...
    'Parent',miscRNG,...
    'String',sprintf('%d',data.params.customRNGSEED),...
    'Tag','params_customRNGSEED',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','off',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.customRNGSEED 0 1e12]),...
    'Callback',@onEditValue);

gui.text_handles.customRNG = uicontrol('Style','Text',...
    'Parent',miscRNG,...
    'String','RNG seed',...
    'FontSize',myui.fontsize);

set(miscRNG,'Widths',[-1 -1 -1]);

%% Export
exportvbox = uix.VBox('Parent',exportpanel,'Spacing',3,'Padding',3);
setExport = uix.HBox('Parent',exportvbox,'Spacing',3);
textSetPML = uix.HBox('Parent',exportvbox,'Spacing',3);
editSetPML = uix.HBox('Parent',exportvbox,'Spacing',3);

tstr = 'If activated, PML boundaries are used for export within the HDF5 file.';
gui.radio_handles.ExportPML = uicontrol('Style','checkbox',...
    'Parent',setExport,...
    'String','use PML',...
    'Tag','PML',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'Value',1,...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onRadioExport);
tstr = 'If activated, a HDF5 file is used for export.';
gui.radio_handles.ExportHDF5 = uicontrol('Style','checkbox',...
    'Parent',setExport,...
    'String','HDF5',...
    'Tag','HDF5',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'Value',1,...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onRadioExport);
tstr = 'If activated, a mat-file is used for export.';
gui.radio_handles.ExportMAT = uicontrol('Style','checkbox',...
    'Parent',setExport,...
    'String','MAT',...
    'Tag','MAT',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'Value',1,...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onRadioExport);
tstr = 'If activated, a fig- and a png-file is exported.';
gui.radio_handles.ExportFIG = uicontrol('Style','checkbox',...
    'Parent',setExport,...
    'String','FIG/PNG',...
    'Tag','FIG',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'Value',1,...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onRadioExport);

gui.text_handles.PMLx = uicontrol('Style','Text',...
    'Parent',textSetPML,...
    'String','PML x [cells]',...
    'FontSize',myui.fontsize);
gui.text_handles.PMLy = uicontrol('Style','Text',...
    'Parent',textSetPML,...
    'String','PML y [cells]',...
    'FontSize',myui.fontsize);
gui.text_handles.PMLz = uicontrol('Style','Text',...
    'Parent',textSetPML,...
    'String','PML z [cells]',...
    'FontSize',myui.fontsize);

tstr = 'PML width in x-direction';
gui.edit_handles.PMLx = uicontrol('Style','Edit',...
    'Parent',editSetPML,...
    'String',sprintf('%d',data.params.pml_w(1)),...
    'Tag','params_PMLx',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.pml_w(1) 0 1000]),...
    'Callback',@onEditValue);
tstr = 'PML width in y-direction';
gui.edit_handles.PMLy = uicontrol('Style','Edit',...
    'Parent',editSetPML,...
    'String',sprintf('%d',data.params.pml_w(2)),...
    'Tag','params_PMLy',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.pml_w(2) 0 1000]),...
    'Callback',@onEditValue);
tstr = 'PML width in z-direction';
gui.edit_handles.PMLz = uicontrol('Style','Edit',...
    'Parent',editSetPML,...
    'String',sprintf('%d',data.params.pml_w(3)),...
    'Tag','params_PMLz',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'Enable','on',...
    'UserData',struct('Tooltipstr',tstr,'defaults',[data.params.pml_w(3) 0 1000]),...
    'Callback',@onEditValue);

%% Java Hack to adjust the text fields vertical alignment
jh = findjobj(gui.text_handles.usetarget);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.targetx);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.targety);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.targetz);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.targetpol);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.targetaz);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.closedSurface);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.SatProfileTop);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.SatProfileBottom);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.customRNG);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PMLx);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PMLy);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PMLz);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)

return

%------------- END OF CODE --------------

%% License:
% GNU GPLv3
%
% GPRGRAVEL
% Copyright (C) 2023 Thomas Hiller
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <https://www.gnu.org/licenses/>.